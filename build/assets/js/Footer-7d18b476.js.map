{"version":3,"file":"Footer-7d18b476.js","sources":["../../../src/pages/ui/Header/components/SearchForm.tsx","../../../src/pages/ui/Header/components/Navigation.tsx","../../../src/pages/ui/FacebookButton/components/Button.tsx","../../../src/pages/ui/FacebookButton/img/facebook-app-symbol.png?format=webp&preset=thumbnail","../../../node_modules/.pnpm/react-hook-form@7.43.9_react@18.2.0/node_modules/react-hook-form/dist/index.esm.mjs","../../../src/pages/ui/LoginForm/LoginForm.tsx","../../../src/customHooks/useModal.hook.ts","../../../src/pages/ui/Header/Header.tsx","../../../src/pages/ui/HistoryBoard/HistoryBoard.tsx","../../../src/utils/breadcrumbs.ts","../../../src/pages/ui/Footer/Footer.tsx"],"sourcesContent":["//SCSS Module imports\r\nimport style from '../scss/SearchFrom.module.scss'\r\n\r\n//Node_modules imports\r\nimport { useState, useRef, useEffect } from 'react'\r\n\r\n//Interfaces imports\r\nimport { FC } from 'react'\r\n\r\nconst SearchForm: FC = () => {\r\n\tconst [filter, setFilter] = useState<string>('Everywhere')\r\n\tconst [inputValue, setInputValue] = useState<string>('')\r\n\tconst [isVisible, setVisible] = useState<boolean>(false)\r\n\r\n\tconst filterArray: string[] = ['Everywhere', 'Topic', 'Members']\r\n\r\n\tconst formRef = useRef<HTMLFormElement>(null)\r\n\r\n\tconst changeFilter = (event: any) => {\r\n\t\tsetFilter(event.target.textContent)\r\n\t}\r\n\r\n\tconst changeInputValue = (event: any) => {\r\n\t\tsetInputValue(event.target.value)\r\n\t}\r\n\r\n\t//TODO: Create custom hook \"useModal\" for Modals containers\r\n\tconst showFilter = (event: any) => {\r\n\t\tif (event.type === 'mouseover') {\r\n\t\t\tsetVisible(true)\r\n\t\t} else if (inputValue.trim() === '' && event.type == 'mouseleave') {\r\n\t\t\tsetTimeout(() => setVisible(false), 2000)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst clickHandler = (event: any) => {\r\n\t\t\tif (inputValue.trim() !== '') {\r\n\t\t\t\treturn\r\n\t\t\t} else if (formRef.current && !formRef.current.contains(event.target)) {\r\n\t\t\t\tsetVisible(false)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdocument.addEventListener('click', clickHandler)\r\n\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener('click', clickHandler)\r\n\t\t}\r\n\t})\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tref={formRef}\r\n\t\t\tclassName={style.header_form}\r\n\t\t\tonMouseOver={showFilter}\r\n\t\t\tonMouseLeave={showFilter}\r\n\t\t>\r\n\t\t\t<input\r\n\t\t\t\tclassName={style.header_form_input}\r\n\t\t\t\ttype='text'\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\tonChange={changeInputValue}\r\n\t\t\t/>\r\n\t\t\t<div\r\n\t\t\t\tclassName={\r\n\t\t\t\t\tisVisible\r\n\t\t\t\t\t\t? `${style.header_form_container} ${style.visible}`\r\n\t\t\t\t\t\t: `${style.header_form_container} ${style.hidden}`\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<p>{filter}</p>\r\n\t\t\t\t<svg className={style.header_filter_icon} viewBox='0 0 320 512'>\r\n\t\t\t\t\t<path d='M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z' />\r\n\t\t\t\t</svg>\r\n\t\t\t\t<ul className={style.header_form_items}>\r\n\t\t\t\t\t{filterArray.map((data, index) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\tclassName={style.header_form_item}\r\n\t\t\t\t\t\t\t\tonClick={changeFilter}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<svg\r\n\t\t\t\t\t\t\t\t\tclassName={style.header_filter_check}\r\n\t\t\t\t\t\t\t\t\tviewBox='0 0 448 512'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<path d='M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z' />\r\n\t\t\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t\t\t\t{data}\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<button className={style.header_submit}>\r\n\t\t\t\t<span className={style.header_submit_icon}>&#9906;</span>\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default SearchForm\r\n","//SCSS Modules imports\r\nimport style from '../scss/Navigation.module.scss'\r\n\r\n//Node_modules imports^b\r\nimport { Link } from 'react-router-dom'\r\n\r\n//Interfaces imports\r\nimport { FC } from 'react'\r\n\r\nconst Navigation: FC = () => {\r\n\treturn (\r\n\t\t<nav className={style.header_nav}>\r\n\t\t\t<h1 className={style.header_logo}>\r\n\t\t\t\t<Link to='/'>\r\n\t\t\t\t\tOnlie\r\n\t\t\t\t\t<span>RPG</span>\r\n\t\t\t\t</Link>\r\n\t\t\t</h1>\r\n\t\t\t<ul className={style.header_nav_items}>\r\n\t\t\t\t<li className={style.header_nav_item}>\r\n\t\t\t\t\t<svg className={style.header_icon} viewBox='0 0 640 512'>\r\n\t\t\t\t\t\t<path d='M608 288h-32v-80a80 80 0 0 0-160 0v80h-32a32 32 0 0 0-32 32v160a32 32 0 0 0 32 32h224a32 32 0 0 0 32-32V320a32 32 0 0 0-32-32zM496 432a32 32 0 1 1 32-32 32 32 0 0 1-32 32zm32-144h-64v-80a32 32 0 0 1 64 0z'></path>\r\n\t\t\t\t\t\t<path d='M224 256A128 128 0 1 0 96 128a128 128 0 0 0 128 128zm96 64a63.08 63.08 0 0 1 8.1-30.5c-4.8-.5-9.5-1.5-14.5-1.5h-16.7a174.08 174.08 0 0 1-145.8 0h-16.7A134.43 134.43 0 0 0 0 422.4V464a48 48 0 0 0 48 48h280.9a63.54 63.54 0 0 1-8.9-32z'></path>\r\n\t\t\t\t\t</svg>\r\n\t\t\t\t\t<p>Users</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className={style.header_nav_item}>\r\n\t\t\t\t\t<svg className={style.header_icon} viewBox='0 0 512 512'>\r\n\t\t\t\t\t\t<path d='M76 160h40a12 12 0 0 0 12-12v-40a12 12 0 0 0-12-12H76a12 12 0 0 0-12 12v40a12 12 0 0 0 12 12zM0 224v208a48 48 0 0 0 48 48h416a48 48 0 0 0 48-48V224z'></path>\r\n\t\t\t\t\t\t<path d='M464 32H48A48 48 0 0 0 0 80v144h512V80a48 48 0 0 0-48-48zM128 148a12 12 0 0 1-12 12H76a12 12 0 0 1-12-12v-40a12 12 0 0 1 12-12h40a12 12 0 0 1 12 12zm320 0a12 12 0 0 1-12 12H188a12 12 0 0 1-12-12v-40a12 12 0 0 1 12-12h248a12 12 0 0 1 12 12z'></path>\r\n\t\t\t\t\t</svg>\r\n\t\t\t\t\t<p>Official Website</p>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className={style.header_nav_item}>\r\n\t\t\t\t\t<svg className={style.header_icon} viewBox='0 0 576 512'>\r\n\t\t\t\t\t\t<path d='M352 287.9H162.3L79.5 350a9.7 9.7 0 0 1-15.5-7.8V288a64.06 64.06 0 0 1-64-64V64A64.06 64.06 0 0 1 64 0h288a64.06 64.06 0 0 1 64 64v160a63.91 63.91 0 0 1-64 63.9z'></path>\r\n\t\t\t\t\t\t<path d='M576 224v160a64.06 64.06 0 0 1-64 64h-32v54.3a9.7 9.7 0 0 1-15.5 7.8L381.7 448H256a64.06 64.06 0 0 1-64-64v-64h160a96.15 96.15 0 0 0 96-96v-64h64a64.06 64.06 0 0 1 64 64z'></path>\r\n\t\t\t\t\t</svg>\r\n\t\t\t\t\t<p>Forum</p>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default Navigation\r\n","//SCSS Module imports\r\nimport style from '../scss/Button.module.scss'\r\n\r\n//Node_modules imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n//Interfaces imports\r\nimport { FC } from 'react'\r\n\r\n//Image imports\r\n//@ts-ignore\r\nimport facebookicon from '../img/facebook-app-symbol.png?format=webp&preset=thumbnail'\r\n\r\nconst Button: FC = () => {\r\n  return(\r\n    <Link className={style.facebok_button_content} to='/'>\r\n    <img\r\n      className={style.facebok_image_container}\r\n      src={facebookicon}\r\n      alt='Facebook icon'\r\n      loading='lazy'\r\n    />\r\n    <div className={style.facebok_text_container}>\r\n      <p>Sign in with Facebook</p>\r\n    </div>\r\n  </Link>\r\n  )\r\n}\r\n\r\nexport default Button","export default \"__VITE_ASSET__60d40087__\";","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!Array.isArray(data) && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                copy[key] = cloneObject(data[key]);\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n    if (!path || !isObject(obj)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj\n        ? isUndefined(obj[path])\n            ? defaultValue\n            : obj[path]\n        : result;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\n    ? name === signalName\n    : !name ||\n        !signalName ||\n        name === signalName ||\n        convertToArrayPayload(name).some((currentName) => currentName &&\n            (currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    return {\n        field: {\n            name,\n            value,\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f && callback(_f.name)) {\n                if (_f.ref.focus) {\n                    _f.ref.focus();\n                    break;\n                }\n                else if (_f.refs && _f.refs[0].focus) {\n                    _f.refs[0].focus();\n                    break;\n                }\n            }\n            else if (isObject(currentField)) {\n                focusFieldBy(currentField, callback);\n            }\n        }\n    }\n};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nfunction append(data, value) {\n    return [...data, ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nfunction prepend(data, value) {\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (!isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append$1 = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = append(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend$1 = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prepend(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError ? !error && existingError.type : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\n        control._names.focus = '';\n        control._updateValid();\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n        append: React.useCallback(append$1, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nfunction createSubject() {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: {},\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = get(_formState.dirtyFields, name);\n            isCurrentFieldPristine\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema();\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                error = errorLookupResult.error;\n                name = errorLookupResult.name;\n                isValid = isEmptyObject(errors);\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                isFieldValueUpdated =\n                    isNaN(fieldValue) ||\n                        fieldValue === get(_formValues, name, fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        field\n            ? disabledIsDefined &&\n                set(_formValues, name, options.disabled\n                    ? undefined\n                    : get(_formValues, name, getFieldValue(field._f)))\n            : updateValidAndValue(name, true, options.value);\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.shouldUseNativeValidation\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            await onValid(fieldValues, e);\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, get(_defaultValues, name));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, options.defaultValue);\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, get(_defaultValues, name))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues || _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneUpdatedValues;\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitting: false,\n            isSubmitSuccessful: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: {},\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, control._defaultValues)) {\n            control._reset(props.values, control._options.resetOptions);\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","//SCSS Module imports\r\nimport style from './LoginForm.module.scss'\r\n\r\n//Components imports\r\nimport Button from '../FacebookButton/components/Button'\r\n\r\n//Node_modules imports\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\n//Interfaces imports\r\nimport { ILoginForm } from './interfaces/form.interfaces.ts'\r\nimport { FC } from 'react'\r\nimport { AppDispatch, RootState } from '@/store/store.ts'\r\nimport { IUserState } from '@/store/userStore/interfaces/user.interfaces.ts'\r\n\r\n//Actions imports\r\nimport userLogin from '@/store/userStore/actions/user.login.action.ts'\r\n\r\ninterface IComponentProps {\r\n\tstate: boolean\r\n}\r\n\r\nconst LoginForm: FC<IComponentProps> = ({ state }) => {\r\n\tconst dispatch = useDispatch<AppDispatch>()\r\n\r\n\tconst { error } = useSelector<RootState, IUserState>(\r\n\t\tstate => state.userAuthSlice\r\n\t)\r\n\r\n\tconst { register, handleSubmit, reset } = useForm<ILoginForm>()\r\n\tconst login: SubmitHandler<ILoginForm> = async userData => {\r\n\t\tdispatch(userLogin({ userData }))\r\n\t\treset()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tclassName={\r\n\t\t\t\tstate\r\n\t\t\t\t\t? `${style.log_form} ${style.visible}`\r\n\t\t\t\t\t: `${style.log_form} ${style.hidden}`\r\n\t\t\t}\r\n\t\t\tonSubmit={handleSubmit(login)}\r\n\t\t>\r\n\t\t\t<div className={style.log_form_container}>\r\n\t\t\t\t<h3 className={style.log_header_title}>Sign in</h3>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName={style.log_input}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Your Name'\r\n\t\t\t\t\t{...register('name')}\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName={style.log_input}\r\n\t\t\t\t\ttype='password'\r\n\t\t\t\t\tplaceholder='Your Password'\r\n\t\t\t\t\t{...register('password')}\r\n\t\t\t\t/>\r\n\t\t\t\t<button className={style.log_button}>Log in</button>\r\n\t\t\t\t{error && <div className={style.log_error_message}>{error}</div>}\r\n\t\t\t</div>\r\n\t\t\t<Button />\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default LoginForm\r\n","const useModal = (ref: any, event: any, state: boolean): boolean => {\r\n\tif (event.target === ref.current && state) {\r\n\t\treturn false\r\n\t} else if (ref.current && ref.current.contains(event.target)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nexport default useModal\r\n","//SCSS Modules imports\r\nimport style from './Header.module.scss'\r\n\r\n//Components imports\r\nimport SearchForm from './components/SearchForm'\r\nimport Navigation from './components/Navigation'\r\nimport LoginForm from '../LoginForm/LoginForm'\r\n\r\n//Node_module imports\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\n//Interfaces imports\r\nimport { FC, Fragment } from 'react'\r\nimport { AppDispatch, RootState } from '@/store/store'\r\nimport { IUserState } from '@/store/userStore/interfaces/user.interfaces'\r\n\r\n//Reducers imports\r\nimport { logout } from '@/store/userStore/user.auth.slice'\r\n\r\n//Custom Hooks imports\r\nimport useModal from '@/customHooks/useModal.hook'\r\n\r\nconst Header: FC = () => {\r\n\tconst [isVisible, setVisible] = useState<boolean>(false)\r\n\tconst logRef = useRef<HTMLLIElement>(null)\r\n\r\n\tuseEffect(() => {\r\n\t\tconst clickHandler = async (event: any) => {\r\n\t\t\tconst newState = useModal(logRef, event, isVisible)\r\n\t\t\tsetVisible(newState)\r\n\t\t}\r\n\r\n\t\tdocument.addEventListener('click', clickHandler)\r\n\r\n\t\treturn () => document.removeEventListener('click', clickHandler)\r\n\t})\r\n\r\n\tconst { role } = useSelector<RootState, IUserState>(\r\n\t\tstate => state.userAuthSlice\r\n\t)\r\n\r\n\tconst dispatch = useDispatch<AppDispatch>()\r\n\r\n\tconst leavFromAccount = () => {\r\n\t\tdispatch(logout(''))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<Navigation />\r\n\t\t\t<div className={style.header_menu}>\r\n\t\t\t\t<ul className={style.header_menu_items}>\r\n\t\t\t\t\t{role !== 'guest' ? (\r\n\t\t\t\t\t\t<li className={style.header_menu_item} onClick={leavFromAccount}>\r\n\t\t\t\t\t\t\tLeav from Account\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t<li className={style.header_menu_item} ref={logRef}>\r\n\t\t\t\t\t\t\t\t<p>Log in</p>\r\n\t\t\t\t\t\t\t\t<LoginForm state={isVisible} />\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t<Link className={style.header_menu_item} to='/registration'>\r\n\t\t\t\t\t\t\t\t\tSign up\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<li className={style.header_menu_item}>Activity</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<SearchForm />\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header\r\n","//SCSS Module imports\r\nimport style from './HistoryBoard.module.scss'\r\n\r\n//Node_module imports\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport { FC } from 'react'\r\n\r\n//Utils imports\r\nimport createBreadcrumbs from '@/utils/breadcrumbs'\r\n\r\ninterface IComponentProps {\r\n\tthemetitle?: string | undefined\r\n}\r\n\r\nconst HistoryBoard: FC<IComponentProps> = ({ themetitle }) => {\r\n\tconst { pathname } = useLocation()\r\n\t\r\n\t//Get Category title when user is in a Category Themes Page\r\n\tconst title = pathname\r\n\t\t.replace('/category/', '')\r\n\t\t.split('/')[1]\r\n\t\t.split('%20')\r\n\t\t.join(' ')\r\n\r\n\tconst res = createBreadcrumbs(pathname, title, themetitle)\r\n\r\n\treturn (\r\n\t\t<nav className={style.navigation_body}>\r\n\t\t\t<div className={style.navigation_items}>\r\n\t\t\t\t{res.map((el, index) => (\r\n\t\t\t\t\t<Link\r\n\t\t\t\t\t\tto={el.path}\r\n\t\t\t\t\t\tkey={`${index + Math.floor(Math.random() * 200)} ${pathname}`}\r\n\t\t\t\t\t\tclassName={style.navigation_item}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{el.title}\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<Link className={style.navigation_activity} to='/'>\r\n\t\t\t\t<svg className={style.navigation_activity_icon} viewBox='0 0 512 512'>\r\n\t\t\t\t\t<path d='M96 96c0-35.3 28.7-64 64-64H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H80c-44.2 0-80-35.8-80-80V128c0-17.7 14.3-32 32-32s32 14.3 32 32V400c0 8.8 7.2 16 16 16s16-7.2 16-16V96zm64 24v80c0 13.3 10.7 24 24 24H296c13.3 0 24-10.7 24-24V120c0-13.3-10.7-24-24-24H184c-13.3 0-24 10.7-24 24zm208-8c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H384c-8.8 0-16 7.2-16 16zm0 96c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H384c-8.8 0-16 7.2-16 16zM160 304c0 8.8 7.2 16 16 16H432c8.8 0 16-7.2 16-16s-7.2-16-16-16H176c-8.8 0-16 7.2-16 16zm0 96c0 8.8 7.2 16 16 16H432c8.8 0 16-7.2 16-16s-7.2-16-16-16H176c-8.8 0-16 7.2-16 16z' />\r\n\t\t\t\t</svg>\r\n\t\t\t\t<p>All Activity</p>\r\n\t\t\t</Link>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default HistoryBoard\r\n","const createBreadcrumbs = (path: string, title: string, themetitle: string | undefined) => {\r\n\tlet crumbs = [\r\n\t\t{\r\n\t\t\ttitle: 'Home',\r\n\t\t\tpath: '/',\r\n\t\t},\r\n\t]\r\n\r\n\tif (path.match('category')) {\r\n\t\tcrumbs = [...crumbs, { title: title, path: path }]\r\n\t} else if (path.match('theme')) {\r\n\t\tcrumbs = [...crumbs, { title: themetitle || '', path: path }]\r\n\t} else if (path.match('registration')) {\r\n\t\tcrumbs = [...crumbs, { title: 'Registration', path: path }]\r\n\t} else if (path.match('user')) {\r\n\t\tcrumbs = [...crumbs, { title: themetitle || '', path: path }]\r\n\t}\r\n\treturn crumbs\r\n}\r\n\r\nexport default createBreadcrumbs\r\n","//SCSS Module imports\r\nimport style from './Footer.module.scss'\r\n\r\n//Node_modules imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n//Interfaces imports\r\nimport { FC } from 'react'\r\n\r\nconst Footer: FC = () => {\r\n  return(\r\n    <footer>\r\n      <p>© 2006 - 2023</p>\r\n      <ul className={style.footer_social_items}>\r\n        <li><Link className={style.footer_social_link} to={'/'}>VKontakte</Link></li>\r\n        <li><Link className={style.footer_social_link} to={'/'}>Youtube</Link></li>\r\n        <li><Link className={style.footer_social_link} to={'/'}>Game Website</Link></li>\r\n        <li><Link className={style.footer_social_link} to={'/'}>Contancts</Link></li>\r\n      </ul>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer"],"names":["SearchForm","filter","setFilter","useState","inputValue","setInputValue","isVisible","setVisible","formRef","useRef","changeFilter","event","target","textContent","showFilter","type","trim","setTimeout","useEffect","clickHandler","current","contains","document","addEventListener","removeEventListener","jsxRuntimeExports","jsxs","ref","className","style","onMouseOver","onMouseLeave","children","jsx","value","onChange","viewBox","d","map","data","index","onClick","Navigation","Link","to","Button","src","alt","loading","isCheckBoxInput","element","isDateObject","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","cloneObject","copy","Set","Blob","FileList","key","compact","Boolean","isUndefined","val","get","obj","path","defaultValue","result","split","reduce","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","React","createContext","isEmptyObject","Object","keys","length","convertToArrayPayload","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","fieldName","watchAll","isKey","test","stringToPath","input","replace","set","object","tempPath","lastIndex","newValue","objValue","isNaN","appendErrors","validateAllFieldCriteria","errors","message","types","focusFieldBy","fields","callback","fieldsNames","field","_f","currentField","focus","refs","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","disabled","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","isEmptyArray","createSubject","_observers","observers","next","observer","subscribe","push","unsubscribe","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","props","flushRootRender","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_defaultValues","_formValues","shouldUnregister","_state","action","unMount","array","timer","_proxyFormState","_subjects","state","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","delayError","updateErrors","wait","clearTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldReference","forEach","optionRef","selected","checkboxRef","find","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","formState","invalid","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","control","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","_getFieldArray","_resetDefaultValues","then","_updateFormState","handleSubmit","onValid","onInvalid","e","preventDefault","persist","payload","resetField","clearErrors","inputName","setError","setFocus","shouldSelect","select","useForm","_formControl","updateFormState","_props","subscription","subject","useSubscribe","formStateData","isRoot","shouldRenderFormState","localProxyFormState","defineProperty","_key","getProxyFormState","LoginForm","dispatch","useDispatch","useSelector","userAuthSlice","log_form","visible","hidden","userData","userLogin","log_form_container","log_header_title","log_input","placeholder","log_button","log_error_message","useModal","Header","logRef","newState","role","logout","Fragment","HistoryBoard","themetitle","pathname","useLocation","title","res","crumbs","createBreadcrumbs","el","Math","floor","random","Footer"],"mappings":"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","x_google_ignoreList":[4]}